/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.ejemplosockets;

import java.io.DataInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.LinkedHashSet;

/**
 *
 * @author dam
 */
public class servidor extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form servidor
     */
    public servidor() {
        initComponents();
        Thread hilo = new Thread(this);
        hilo.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pantalla1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        pantalla2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pantalla1.setColumns(20);
        pantalla1.setRows(5);
        jScrollPane1.setViewportView(pantalla1);

        pantalla2.setColumns(20);
        pantalla2.setRows(5);
        jScrollPane2.setViewportView(pantalla2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea pantalla1;
    private javax.swing.JTextArea pantalla2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
    try{
        
        ServerSocket servidor = new ServerSocket(9999);
        
        while(true){
            Socket misocket = servidor.accept();
            DataInputStream recibirDatos = new DataInputStream(misocket.getInputStream());
            
            String mensajes = recibirDatos.readUTF();
            String mensaje2 = recibirDatos.readUTF();
            
            String cifrado = Cifrado(mensajes, mensaje2);
            String mensaje3 = Descifrado(cifrado, mensaje2);
            pantalla1.setText("");
            pantalla2.setText("");
            pantalla1.append("\n" + cifrado);
            pantalla2.append("\n" + mensaje3);
            
            
        }



//DataInputStream datosRecibidos = new DataInputStream();
        
        
    }catch(Exception e){
        System.out.println(e);
    }
    
    }
    
    public static String Cifrado(String mensaje, String clave) {

        //GENERAMOS LA MATRIZ
        char[][] matriz = GenerarMatriz(clave);

        //GENREMOS LAS PAREJAS DE CARACTERES
        char[][] parejaCaracteres = GenerarParejas(mensaje);

        System.out.println("\n \t Matriz");

        //IMPRIMIMOS LA MATRIZ
        Imprimir(matriz);

        String cifrado = "";

        int[] direcciones;
        int[] direcciones2;
        int columna = 0;

        //RECORRE TODAS LAS PAREJAS DE CARACTERES
        for (char[] parejaCaractere : parejaCaracteres) {
            // OBTENEMOS LA POSICION DE LOS CARACTERES EN LA MATRIZ
            direcciones = ObtenerPosicionCaracter(parejaCaractere[columna], matriz);
            columna++;
            direcciones2 = ObtenerPosicionCaracter(parejaCaractere[columna], matriz);
            if (columna == 1) {
                columna = 0;
            }
            // GUARDAMOS LAS POSICIONES PARA COMPROBAR DONDE SE ENCUENTRAN
            int fila1 = direcciones[0];
            int columna1 = direcciones[1];
            int fila2 = direcciones2[0];
            int columna2 = direcciones2[1];
            //REGLA 1: SI ESTAN EN LA MISMA FILA SE LE SUMA +1 A LA COLUMNA
            int fTemporal;
            if (fila1 == fila2) {
                fTemporal = columna1 + 1;
                if (fTemporal == matriz.length) {
                    fTemporal = 0;
                }

                cifrado += matriz[fila1][fTemporal];

                fTemporal = columna2 + 1;
                if (fTemporal == matriz.length) {
                    fTemporal = 0;
                }

                cifrado += matriz[fila2][fTemporal];
            }
            //REGLA 2: SI EST√ÅN EN LA MISMA COLUMNA SE LE SUMA +1 A LA FILA
            int cTemporal;
            if (columna1 == columna2) {

                cTemporal = fila1 + 1;

                if (cTemporal == matriz.length) {
                    cTemporal = 0;
                }

                cifrado += matriz[cTemporal][columna1];

                cTemporal = fila2 + 1;

                if (cTemporal == matriz.length) {
                    cTemporal = 0;
                }

                cifrado += matriz[cTemporal][columna2];

            }
            //SI NO CUMPLE NINGUNA DE LAS ANTERIORES
            //REGLA 3: SE COLOCA LA DIAGONAL OPUESTA, SE INVIERTEN LAS COLUMNAS
            if (fila1 != fila2 & columna1 != columna2) {

                cifrado += matriz[fila1][columna2];
                cifrado += matriz[fila2][columna1];

            }
        }

        // DEVOLVEMOS EL TEXTO CIFRADO
        return cifrado;
    }
    
       public static String Descifrado(String cifrado, String clave) {

        String mensaje = "";

        char[][] matriz = GenerarMatriz(clave);
        char[][] parejas = GenerarParejas(cifrado);

        int[] direcciones;
        int[] direcciones2;

        int columnas = 0;
        for (char[] pareja : parejas) {
            direcciones = ObtenerPosicionCaracter(pareja[columnas], matriz);
            columnas++;
            int fila1 = direcciones[0];
            int columna1 = direcciones[1];
            direcciones2 = ObtenerPosicionCaracter(pareja[columnas], matriz);
            if (columnas == 1) {
                columnas = 0;
            }
            int fila2 = direcciones2[0];
            int columna2 = direcciones2[1];
            //MISMA FILA: RESTEMAS UNO A LA COLUMNA 
            int fTemporal;
            if (fila1 == fila2) {
                fTemporal = columna1 - 1;
                if (fTemporal < 0) {
                    fTemporal = matriz.length - 1;
                }

                mensaje += matriz[fila1][fTemporal];

                fTemporal = columna2 - 1;
                if (fTemporal < 0) {
                    fTemporal = matriz.length - 1;
                }

                mensaje += matriz[fila2][fTemporal];
            }
            int cTemporal;
            //MISMA COLUMNA: RESTEMAS UNO A LA FILA
            
            if (columna1 == columna2) {

                cTemporal = fila1 - 1;

                if (cTemporal < 0) {
                    cTemporal = matriz.length - 1;
                }

                mensaje += matriz[cTemporal][columna1];

                cTemporal = fila2 - 1;

                if (cTemporal < 0) {
                    cTemporal = matriz.length - 1;
                }

                mensaje += matriz[cTemporal][columna2];

            }
            //LO DE DIAGONAL NO CAMBIA, COGEMOS LA OPUESTA
            if (fila1 != fila2 & columna1 != columna2) {

                mensaje += matriz[fila1][columna2];
                mensaje += matriz[fila2][columna1];
            }
        }
        return mensaje;
    }

    public static int[] ObtenerPosicionCaracter(char caracter, char[][] matriz) {

        int[] direccion = new int[2];

        for (int i = 0; i < matriz.length; i++) {

            for (int j = 0; j < matriz[i].length; j++) {

                if (caracter == matriz[i][j]) {
                    direccion[0] = i;
                    direccion[1] = j;
                }
            }
        }

        return direccion;

    }

    public static char[][] GenerarParejas(String mensaje) {

        int tamano = mensaje.length();

        //SE REVISA QUE NO ALLA CARACTERES REPETIDOS CONSECUTIVAMENTE COMO "LLAVE"
        //TENDRIA QUE QUEDA LXLAVE
        char[] revision = mensaje.toCharArray();
        ArrayList<Character> arrayRevision = new ArrayList<>();
        for (int i = 0; i < mensaje.length(); i++) {
            arrayRevision.add(revision[i]);

            if (i + 1 < revision.length) {
                if (revision[i] == revision[i + 1]) {
                    arrayRevision.add('x');
                }
            }
        }

        //REVISAMOS QUE EL MENSAJE QUEDE DE UN TAMA√ëO PAR SI NO ES ASI AGREGAMOS X AL FINAL PARA VOLVERLO PAR
        if (arrayRevision.size() % 2 != 0) {
            arrayRevision.add('x');
        }

        //SE FORMA UNA MATRIZ DE 2 COLUMNAS PARA LAS PAREJAS DE CARACTERES
        char[][] parejaCaracteres = new char[arrayRevision.size() / 2][2];
        int cont = 0;
        for (char[] parejaCaractere : parejaCaracteres) {
            for (int j = 0; j < parejaCaracteres[1].length; j++) {
                parejaCaractere[j] = arrayRevision.get(cont);
                cont++;
            }
        }

        return parejaCaracteres;
    }

    public static char[][] GenerarMatriz(String clave) {
        char[][] matriz = new char[9][9];

        char[] caracteresClave = clave.toCharArray();
        char[] numeros = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        char[] letrasEspeciales = {'√°', '√©', '√≠', '√≥', '√∫', '√±', '√º', '√Ø'};
        char[] letras = new char[26];
        char[] signos = {'+', '-', '$', '&', ',', '.', ' ', '@', '*', '%', '=', '?', '¬ø', '!', '¬°', '{', '}', '(', ')', '[', ']', '#'};
        LinkedHashSet<Character> caracteresMatriz = new LinkedHashSet<>();

        //ELIMINAMOS LAS LETRAS REPETIDAS DE A CLAVE
        //SE INGRESA LA CLAVE SIN CARACTERES REPETIDOS A LA COLECCION QUE TENDRA TODOS LOS CARACTERES DE LA MATRIS
        for (int k = 0; k < caracteresClave.length; k++) {
            caracteresMatriz.add(caracteresClave[k]);
        }

        //GENERAMOS LAS LETRAS SEGUN SU POSICION EN ASCII
        for (int i = 97; i < 123; i++) {
            letras[i - 97] = (char) i;
        }

        //INGRESAMOS EL RESTO DEL ABCEDARIO
        for (int i = 0; i < letras.length; i++) {
            caracteresMatriz.add(letras[i]);
        }

        for (int i = 65; i < 90; i++) {
            letras[i - 65] = (char) i;
        }

        for (int i = 0; i < letras.length; i++) {
            caracteresMatriz.add(letras[i]);
        }

        for (int i = 0; i < letrasEspeciales.length; i++) {
            caracteresMatriz.add(letrasEspeciales[i]);
        }

        //SE INGRESAN LOS NUMEROS
        for (int i = 0; i < numeros.length; i++) {
            caracteresMatriz.add(numeros[i]);
        }

        //INGRESAMOS UNA SERIE DE SIGNOS
        for (int i = 0; i < signos.length; i++) {
            caracteresMatriz.add(signos[i]);
        }

        //SE CONVIERTE EL LINKEDHASHSET EN UN ARRAY PARA LUEGO METERLO EN LA MATRIZ
        int cont;
        char[] arrayTemporal = new char[caracteresMatriz.size()];
        cont = 0;
        for (char caracter : caracteresMatriz) {
            arrayTemporal[cont] = caracter;
            cont++;
        }

        //SE INGRESAN A LA MATRIZ TODOS LOS CARACTERES (CON ESTO TENDRIAMOS NUESTRA MATRIZ LISTA)
        cont = 0;
        for (char[] matriz1 : matriz) {
            for (int j = 0; j < matriz[0].length; j++) {
                matriz1[j] = arrayTemporal[cont];
                cont++;
            }
        }
        return matriz;
    }

    public static void Imprimir(char[][] matriz) {
        for (char[] matriz1 : matriz) {
            for (int j = 0; j < matriz1.length; j++) {
                System.out.print(matriz1[j] + " ");
            }
            System.out.println("");
        }
    }
}
